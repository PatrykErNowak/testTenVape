"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,i){for(var e=0;e<i.length;e++){var n=i[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,_toPropertyKey(n.key),n)}}function _createClass(t,i,e){return i&&_defineProperties(t.prototype,i),e&&_defineProperties(t,e),Object.defineProperty(t,"prototype",{writable:!1}),t}function _toPropertyKey(t){t=_toPrimitive(t,"string");return"symbol"===_typeof(t)?t:String(t)}function _toPrimitive(t,i){if("object"!==_typeof(t)||null===t)return t;var e=t[Symbol.toPrimitive];if(void 0===e)return("string"===i?String:Number)(t);e=e.call(t,i||"default");if("object"!==_typeof(e))return e;throw new TypeError("@@toPrimitive must return a primitive value.")}var canvasBg=function(){function t(){s=[];for(var t=a.height*a.width/1e4,i=0;i<t;i++){var e=5*Math.random()+1,n=Math.random()*(window.innerWidth-2*e-2*e)+2*e,r=Math.random()*(window.innerHeight-2*e-2*e)+2*e,o=.2*Math.random(),h=.2*Math.random();s.push(new d(n,r,o,h,e,"#1cca59"))}}function r(){requestAnimationFrame(r),o.clearRect(0,0,window.innerWidth,window.innerHeight);for(var t=0;t<s.length;t++)s[t].update();for(var i=0;i<s.length;i++)for(var e=0;e<s.length;e++){var n=(s[i].x-s[e].x)*(s[i].x-s[e].x)+(s[i].y-s[e].y)*(s[i].y-s[e].y);n<a.width/7*a.height/7&&(o.strokeStyle="rgba(28, 202, 89,".concat(1-n/15e3,")"),o.lineWidth=1,o.beginPath(),o.moveTo(s[i].x,s[i].y),o.lineTo(s[e].x,s[e].y),o.stroke())}}var s,a=document.getElementById("canvas1"),o=a.getContext("2d"),e=(a.width=window.innerWidth,a.height=window.innerHeight,{x:null,y:null,radius:a.height/220*(a.width/220)}),d=(window.addEventListener("mousemove",function(t){e.x=t.x,e.y=t.y}),function(){function h(t,i,e,n,r,o){_classCallCheck(this,h),this.x=t,this.y=i,this.directionX=e,this.directionY=n,this.size=r,this.color=o}return _createClass(h,[{key:"draw",value:function(){o.beginPath(),o.arc(this.x,this.y,this.size,0,2*Math.PI,!1),o.fillStyle="#1cca59",o.fill()}},{key:"update",value:function(){(this.x>a.width||this.x<0)&&(this.directionX=-this.directionX),(this.y>a.height||this.y<0)&&(this.directionY=-this.directionY);var t=e.x-this.x,i=e.y-this.y;Math.sqrt(t*t+i*i)<e.radius+this.size&&(e.x<this.x&&this.x<a.width-10*this.size&&(this.x+=10),e.x>this.x&&this.x>10*this.size&&(this.x-=10),e.y<this.y&&this.y<a.height-10*this.size&&(this.y+=10),e.y>this.y)&&this.y>10*this.size&&(this.y-=10),this.x+=this.directionX,this.y+=this.directionY,this.draw()}}]),h}());window.addEventListener("resize",function(){a.width=window.innerWidth,a.height=window.innerHeight,e.radius=a.height/220*(a.width/220),t()}),window.addEventListener("mouseout",function(){e.x=void 0,e.y=void 0}),t(),r()};canvasBg();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
